@inject NavigationManager navManager

<EditForm Model="@Categories" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Name:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Categories.Name" />
            }
            else
            {
                <input type="text" value="@Categories.Name" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Categories.Name)" />
        </div>
    </div>
    <div class="form-group">
        <label>Description:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputTextArea @bind-Value="@Categories.Desc" />
            }
            else
            {
                <textarea readonly="@isReadOnly">@Categories.Desc</textarea>
            }

            <ValidationMessage For="@(() => Categories.Desc)" />
        </div>
    </div>
    <div class="form-group">
        <label>Image:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Categories.Image" />
            }
            else
            {
                <input type="text" value="@Categories.Image" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Categories.Image)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">@ButtonText</button>
    <button type="button" class="btn btn-primary" @onclick="@Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public Categories Categories { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save Category";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool isReadOnly { get; set; } = false;

    void Cancel()
    {
        navManager.NavigateTo("categories");
    }
}