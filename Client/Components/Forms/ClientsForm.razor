@inject NavigationManager navManager

<EditForm Model="@Clients" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Username:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.Username" />
            }
            else
            {
                <input type="text" value="@Clients.Username" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.Username)" />
        </div>
    </div>
    <div class="form-group">
        <label>Email:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.Email" />
            }
            else
            {
                <input type="email" value="@Clients.Email" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.Email)" />
        </div>
    </div>
    <div class="form-group">
        <label>Password:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.Password" />
            }
            else
            {
                <input type="password" value="@Clients.Password" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.Password)" />
        </div>
    </div>
    <div class="form-group">
        <label>Full Name:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.FullName" />
            }
            else
            {
                <input type="text" value="@Clients.FullName" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.FullName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Billing Address:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.BillingAddress" />
            }
            else
            {
                <input type="text" value="@Clients.BillingAddress" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.BillingAddress)" />
        </div>
    </div>
    <div class="form-group">
        <label>Shipping Address:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.ShippingAddress" />
            }
            else
            {
                <input type="text" value="@Clients.ShippingAddress" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.ShippingAddress)" />
        </div>
    </div>
    <div class="form-group">
        <label>Country:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.Country" />
            }
            else
            {
                <input type="text" value="@Clients.Country" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.Country)" />
        </div>
    </div>
    <div class="form-group">
        <label>Phone:</label>
        <div>
            @if (isReadOnly == false)
            {
                <InputText @bind-Value="@Clients.Phone" />
            }
            else
            {
                <input type="text" value="@Clients.Phone" readonly="@isReadOnly" />
            }

            <ValidationMessage For="@(() => Clients.Phone)" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary">@ButtonText</button>
    <button type="button" class="btn btn-primary" @onclick="@Cancel">Cancel</button>
</EditForm>

@code {
    [Parameter] public Clients Clients { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save Client";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool isReadOnly { get; set; } = false;

    void Cancel()
    {
        navManager.NavigateTo("clients");
    }
}