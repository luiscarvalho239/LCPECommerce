@using LCPECommerce.Shared.Models
@using LCPECommerce.Client.Helpers
@using LCPECommerce.Client.Services
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject HttpClient http
@inject NavigationManager navManager

<EditForm Model="@clients" OnValidSubmit="@ValidLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Email:</label>
        <InputText @bind-Value="@clients.Email" type="email" class="form-control" />
        <ValidationMessage For="@(() => clients.Email)" />
    </div>
    <div class="form-group">
        <label>Password:</label>
        <InputText @bind-Value="@clients.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => clients.Password)" />
    </div>
    <button type="submit" class="btn btn-primary" disabled="@loading">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Login
    </button>
    <button type="button" class="btn btn-primary" @onclick="@Cancel">Cancel</button>
</EditForm>

<div class="mt-3 blkinfo">
    <p>Dont you have account created on this website? Please <a href="/account/register" target="_blank">create it</a>, thank you :).</p>
    <a href="/" class="btn btn-primary mt-3">Back to Home</a>
</div>

@code {
    Clients clients = new Clients();
    private HubConnection hubConnection;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navManager.ToAbsoluteUri("/ClientHub"))
            .Build();
        await hubConnection.StartAsync();
    }

    public bool isConnected => hubConnection.State == HubConnectionState.Connected;

    async Task ValidLogin()
    {
        //clients = await http.GetFromJsonAsync<Clients>("api/clients");
        AlertService.Clear();
        loading = true;

        try
        {
            await AccountService.Login(clients);
            var returnUrl = navManager.QueryString("returnUrl") ?? "";
            if (isConnected) await SendMessage();
            navManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    void Cancel()
    {
        navManager.NavigateTo("");
    }
}